# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Supabase CI Test
env:
  SUPABASE_ANON_KEY: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdXBhYmFzZSIsImlhdCI6MTYyNzIwODU0MCwiZXhwIjoxOTc0MzYzNzQwLCJhdWQiOiIiLCJzdWIiOiIiLCJyb2xlIjoiYW5vbiJ9.sUHErUOiKZ3nHQIxy-7jND6B80Uzf9G4NtMLmL6HXPQ"
  SUPABASE_SERVICE_ROLE_KEY: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdXBhYmFzZSIsImlhdCI6MTYyNzIwNzUzMiwiZXhwIjoxNjkwMjc5NTMyLCJhdWQiOiIiLCJzdWIiOiIiLCJyb2xlIjoic2VydmljZV9yb2xlIn0.hfdXFZV5PdvUdo2xK0vStb1i97GJukSkRqfwd4YIh2M"
  JWT_SECRET: "your-super-secret-jwt-token-with-at-least-32-characters-long"
  SUPABASE_URL: http://localhost:8000
  DATABASE_URL: "postgres://postgres:your-super-secret-and-long-postgres-password@localhost:5432/postgres"
  POSTGRES_PASSWORD: "your-super-secret-and-long-postgres-password"
  # fill with random passwords
  OPERATOR_TOKEN: your-super-secret-operator-token
  # some SMTP server to send your auth-mails with
  # uses inbucket http://localhost:9000
  SMTP_HOST: mail
  SMTP_PORT: 2500
  SMTP_USER: admin
  SMTP_PASS: 123456
  SMTP_ADMIN_EMAIL: info@stadtpuls.com
  # storage config
  STORAGE_BACKENDP: file # file | s3
  STORAGE_S3_BUCKET: supa-storage-testing # name of s3 bucket where you want to store objects
  STORAGE_REGION: us-east-1 # region where your bucket is located
  # STORAGE_AWS_ACCESS_KEY_ID=XXXX # replace-with-your-aws-key and don't commit this to github
  # STORAGE_AWS_SECRET_ACCESS_KEY=XXXX # replace-with-your-aws-key and don't commit this to github
  FILE_SIZE_LIMIT: 52428800 # max file size (in bytes)
  # predefined; don't change these unless you know what you're doing
  POSTGRES_PORT: 5432
  AUTH_PORT: 9999
  REST_PORT: 3000
  REALTIME_PORT: 4000
  KONG_PORT: 8000
  KONG_PORT_TLS: 8443
  SUPABASE_MAX_ROWS: 3000

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: "Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)"
        required: false
        default: false

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Run supabase
        run: docker-compose --env-file supabase-docker-compose/.env.example --file supabase-docker-compose/docker-compose.yml up --detach --build --force-recreate
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm run test:ci
      - name: Setup tmate session
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3
        # if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}
        timeout-minutes: 3
        with:
          limit-access-to-actor: true
  release:
    name: Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
      - name: Install dependencies
        run: npm ci
      - name: Release
        env:
          GITHUB_TOKEN: ${{secrets.GH_TOKEN}}
          NPM_TOKEN: ${{secrets.NPM_TOKEN}}
        run: npx semantic-release
